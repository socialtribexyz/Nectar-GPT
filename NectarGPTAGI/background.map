{"version":3,"file":"background.js","mappingsvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://Nectar/./node_modules/openai-edge/dist/index.mjs","webpack://Nectar/webpack/bootstrap","webpack://Nectar/webpack/runtime/define property getters","webpack://Nectar/webpack/runtime/hasOwnProperty shorthand","webpack://Nectar/webpack/runtime/make namespace object","webpack://Nectar/./src/background.js"],"sourcesContent":["const BASE_PATH = \"https://api.openai.com/v1\".replace(/\\/+$/, \"\");\r\nclass Configuration {\r\n    /**\r\n     * parameter for apiKey security\r\n     * @param name security name\r\n     * @memberof Configuration\r\n     */\r\n    apiKey;\r\n    /**\r\n     * OpenAI organization id\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    organization;\r\n    /**\r\n     * parameter for basic security\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    username;\r\n    /**\r\n     * parameter for basic security\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    password;\r\n    /**\r\n     * parameter for oauth2 security\r\n     * @param name security name\r\n     * @param scopes oauth2 scope\r\n     * @memberof Configuration\r\n     */\r\n    accessToken;\r\n    /**\r\n     * override base path\r\n     *\r\n     * @type {string}\r\n     * @memberof Configuration\r\n     */\r\n    basePath;\r\n    /**\r\n     * base options for axios calls\r\n     *\r\n     * @type {any}\r\n     * @memberof Configuration\r\n     */\r\n    baseOptions;\r\n    /**\r\n     * The FormData constructor that will be used to create multipart form data\r\n     * requests. You can inject this here so that execution environments that\r\n     * do not support the FormData class can still run the generated client.\r\n     *\r\n     * @type {new () => FormData}\r\n     */\r\n    formDataCtor;\r\n    // asdlfkalsdfkmad\r\n    constructor(param = {}) {\r\n        this.apiKey = param.apiKey;\r\n        this.organization = param.organization;\r\n        this.username = param.username;\r\n        this.password = param.password;\r\n        this.accessToken = param.accessToken;\r\n        this.basePath = param.basePath;\r\n        this.baseOptions = param.baseOptions;\r\n        this.formDataCtor = param.formDataCtor;\r\n        if (!this.baseOptions) {\r\n            this.baseOptions = {};\r\n        }\r\n        this.baseOptions.headers = Object.assign({\r\n            // \"User-Agent\": `OpenAI/NodeJS/${packageJson.version}`,\r\n            Authorization: `Bearer ${this.apiKey}`,\r\n        }, this.baseOptions.headers);\r\n        if (this.organization) {\r\n            this.baseOptions.headers[\"OpenAI-Organization\"] = this.organization;\r\n        }\r\n        // if (!this.formDataCtor) {\r\n        //   this.formDataCtor = require(\"form-data\")\r\n        // }\r\n    }\r\n    /**\r\n     * Check if the given MIME is a JSON MIME.\r\n     * JSON MIME examples:\r\n     *   application/json\r\n     *   application/json; charset=UTF8\r\n     *   APPLICATION/JSON\r\n     *   application/vnd.company+json\r\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\r\n     * @return True if the given MIME is JSON, false otherwise.\r\n     */\r\n    isJsonMime(mime) {\r\n        const jsonMime = new RegExp(\"^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$\", \"i\");\r\n        return (mime !== null &&\r\n            (jsonMime.test(mime) ||\r\n                mime.toLowerCase() === \"application/json-patch+json\"));\r\n    }\r\n}\r\n/**\r\n *\r\n * @export\r\n * @class BaseAPI\r\n */\r\nclass BaseAPI {\r\n    basePath;\r\n    configuration;\r\n    constructor(configuration, basePath = BASE_PATH) {\r\n        this.basePath = basePath;\r\n        // this.axios = axios;\r\n        if (configuration) {\r\n            this.configuration = configuration;\r\n            this.basePath = configuration.basePath || this.basePath;\r\n        }\r\n    }\r\n}\r\n/**\r\n * OpenAIApi - object-oriented interface\r\n * @export\r\n * @class OpenAIApi\r\n * @extends {BaseAPI}\r\n */\r\nclass OpenAIApi extends BaseAPI {\r\n    /**\r\n     *\r\n     * @summary Creates a completion for the chat message\r\n     * @param {CreateChatCompletionRequest} createChatCompletionRequest\r\n     * @throws {RequiredError}\r\n     * @memberof OpenAIApi\r\n     */\r\n    createChatCompletion(createChatCompletionRequest\r\n    // options?: AxiosRequestConfig\r\n    ) {\r\n        if (!this.configuration) {\r\n            throw new Error(`Must provide a valid configuration to \\`OpenAIApi\\``);\r\n        }\r\n        return fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                ...this.configuration.baseOptions.headers,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(createChatCompletionRequest),\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @summary Creates a completion for the provided prompt and parameters\r\n     * @param {CreateCompletionRequest} createCompletionRequest\r\n     * @throws {RequiredError}\r\n     * @memberof OpenAIApi\r\n     */\r\n    createCompletion(createCompletionRequest\r\n    // options?: AxiosRequestConfig\r\n    ) {\r\n        if (!this.configuration) {\r\n            throw new Error(`Must provide a valid configuration to \\`OpenAIApi\\``);\r\n        }\r\n        return fetch(\"https://api.openai.com/v1/completions\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                ...this.configuration.baseOptions.headers,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(createCompletionRequest),\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @summary Creates an image given a prompt.\r\n     * @param {CreateImageRequest} createImageRequest\r\n     * @throws {RequiredError}\r\n     * @memberof OpenAIApi\r\n     */\r\n    createImage(createImageRequest\r\n    // options?: AxiosRequestConfig\r\n    ) {\r\n        if (!this.configuration) {\r\n            throw new Error(`Must provide a valid configuration to \\`OpenAIApi\\``);\r\n        }\r\n        return fetch(\"https://api.openai.com/v1/images/generations\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                ...this.configuration.baseOptions.headers,\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(createImageRequest),\r\n        });\r\n    }\r\n}\n\nexport { Configuration, OpenAIApi };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Configuration, OpenAIApi} from 'openai-edge'\n\nchrome.runtime.onInstalled.addListener(async () => {\n  chrome.contextMenus.create({\n    id: 'chatgpt',\n    title: 'NectarGPT',\n    contexts: ['selection'],\n  })\n  chrome.contextMenus.create({\n    id: 'improveWriting',\n    parentId: 'chatgpt',\n    title: 'Improve writing',\n    contexts: ['selection'],\n  })\n  chrome.contextMenus.create({\n    id: 'makeLonger',\n    parentId: 'chatgpt',\n    title: 'Make longer',\n    contexts: ['selection'],\n  })\n  chrome.contextMenus.create({\n    id: 'makeShorter',\n    parentId: 'chatgpt',\n    title: 'Make shorter',\n    contexts: ['selection'],\n  })\n  chrome.contextMenus.create({\n    id: 'summarize',\n    parentId: 'chatgpt',\n    title: 'Make summary',\n    contexts: ['selection'],\n  })\n  chrome.contextMenus.create({\n    id: 'command',\n    parentId: 'chatgpt',\n    title: 'Automate task',\n    contexts: ['selection'],\n  })\n})\n\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\n  const {menuItemId, frameId} = info\n  const {key} = await chrome.storage.local.get(['key'])\n\n  if (!key) {\n    const error = 'Please set your OpenAI API key in the extension options'\n    console.error(error)\n    chrome.tabs.sendMessage(tab.id, {method: 'alert', data: error})\n    return\n  }\n\n  const {data: selectedText} = await chrome.tabs.sendMessage(tab.id, {method: 'getSelection'})\n\n  if (selectedText) {\n    switch (menuItemId) {\n      case 'improveWriting':\n        await runCommand(tab, key, `Improve the writing of the following content. \\n\\n${selectedText}`)\n        break\n      case 'makeLonger':\n        chrome.tabs.sendMessage(tab.id, {method: 'clearSelection'})\n        await runCommand(tab, key, `Make the following content longer: \\n\\n${selectedText}`)\n        break\n      case 'makeShorter':\n        await runCommand(tab, key, `Make the following content shorter: \\n\\n${selectedText}`)\n        break\n      case 'summarize':\n        await runCommand(tab, key, `Make a summary of the following content: \\n\\n${selectedText}`)\n        break\n      case 'command':\n        await runCommand(tab, key, selectedText, true)\n        break\n    }\n  } else {\n    const error = 'Please select some text'\n    console.error(error)\n    chrome.tabs.sendMessage(tab.id, {method: 'alert', data: error})\n  }\n})\n\nconst runCommand = async (tab, key, command, commandOnly = false) => {\n  const configuration = new Configuration({\n    apiKey: key,\n  })\n  const openai = new OpenAIApi(configuration)\n  const messages = []\n  if (commandOnly) {\n    messages.push({role: 'system', content: 'You are a helpful assistant.'})\n  } else {\n    messages.push({\n      role: 'system',\n      content:\n        'I want you to act as a professional writer, spelling corrector and improver. I will give you a command to follow and some content. Always reply in the original language the content was written in. I want you to only reply the new content and nothing else, do not write explanations. ',\n    })\n  }\n  messages.push({role: 'user', content: command})\n\n  const completion = await openai.createChatCompletion({\n    model: 'gpt-3.5-turbo',\n    messages,\n    stream: true,\n    max_tokens: 500,\n  })\n\n  const reader = completion.body.getReader()\n  const readStream = () => {\n    reader\n      .read()\n      .then(({done, value}) => {\n        if (done) {\n          return\n        }\n        let isFinished = false\n        const res = new TextDecoder()\n          .decode(value)\n          .split('data: ')\n          .filter((s) => !!s)\n        let output = ''\n        for (const r of res) {\n          if (r.startsWith('[DONE]')) {\n            isFinished = true\n          } else {\n            const parsed = JSON.parse(r)\n            if (parsed.error) {\n              throw new Error('Problem getting response from OpenAI: ' + parsed.error.message)\n            } else {\n              output += parsed.choices[0].delta.content || ''\n            }\n          }\n        }\n\n        chrome.tabs.sendMessage(tab.id, {method: 'replaceSelection', data: output})\n\n        if (!isFinished) {\n          readStream()\n        }\n      })\n      .catch((error) => {\n        console.error(error)\n        chrome.tabs.sendMessage(tab.id, {method: 'alert', data: error.toString()})\n      })\n  }\n  readStream()\n}\n"],"names":[],"sourceRoot":""}